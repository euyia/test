v-bind  主要用于属性绑定，Vue官方提供了一个简写方式 :bind，例如：

1
2
<!-- 完整语法 -->
<a v-bind:href="url"></a>
1
2
<!-- 缩写 -->
<a :href="url"></a>

v-on就是事件绑定
简写@
vue很大的一个优点来源 就是他首先进行了数据绑定 js和html文档之间
它就不需要去重新获取值。这是js里面很费劲的一件事

【单选题】执行以下代码, span的类值是?
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<div id="app">
<span :class="{bgred: backgroundred}" >一些文本</span>
</div>
<script>
var vm = new Vue({
	el:'#app',
	data:{
	    backgroundred: true
	}
	});
</script>
bgred  这个是类值。那么冒号后面的又是什么。。？？

内联样式？style 内联元素不是和块元素对应的吗。div明明就是块级元素
行内元素和内联元素是同一个意思

html中内联元素和块级元素的区别
块级元素	行内元素
独占一行,默认情况下，其宽度自动填满其父元素宽度	相邻的行内元素会排列在同一行里，直到一行排不下，才会换行，其宽度随元素的内容而变化
可以设置width，height属性	行内元素设置width，height属性无效
可以设置margin和padding属性	行内元素起边距作用的只有margin-left、margin-right、padding-left、padding-right，其它属性不会起边距效果。
对应于display:block	对应于display:inline；
还是要视频逻辑更正完整 思路更清晰。而且更加系统化。。！！！！
看文字很多都是很片面的浅层的表达。。！！
即除 false、0、""、null、undefined 和 NaN 以外皆为真值）。
这几个特殊类型 记录下。。。。
需要看的基础。。。

 v-else-if，顾名思义，充当 v-if 的“else-if 块”，可以连续使用！！！
 类似于 v-else，v-else-if 也必须紧跟在带 v-if 或者 v-else-if 的元素之后

 v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。

一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。

因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。

官方的表达果然是最准确的。。。。


我们可以用 v-for 指令基于一个数组来渲染一个列表。

v-for 指令需要使用 item in items 形式的特殊语法，
其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名。


作用域 是否就是一个定义的作用的范围。比如var id; 这个如果放在最外面 
就是全局。全局都可以用的。。。应该差不多这个方向的意思
但是他有特定符号吗？？？？？？
$ 这个就是全局作用域的符号。。$ 是在 Vue 所有实例中都可用的属性的一个简单约定



【选词填空】以下name为属性的键名, 完善代码
<li v-for="(value, name) in object">
{{ name }}: {{ value }}
</li>
这个name 为啥要换顺序写？？、？



在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。

尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。

为了解决这个问题，Vue.js 为 v-on 提供了事件修饰符。之前提过，修饰符是由点开头的指令后缀来表示的。

.stop
.prevent
.capture
.self
.once [2.1.4 新增]
.passive [2.3.0 新增] 

keyup是按键弹起时才响应，keydown是按钮按下后就响应。
区别是：如果一个人按下钮还没放的时候，突然感觉按错了按钮，不想让它响应，
那就需要keyup的功劳了：按下后，左键不放，将鼠标移到按钮外再放下
，keyup就不响应了(keyup必须在相应的按钮上才有用)。


组件中的data 为啥必须要是函数？？？？
prop 支持 支柱


子组件中的数据想要传倒父组件需要容器来接纳，用此事件方法是一个很好容器。
1首先在父组件的嵌套子组件中，绑定一个自定义事件，并且定义这个事件的方法，来获取子组件输入的数据。
2在子组件的input元素中，仓的那个监听事件@input。定义这个事件的方法，
使用$emit传递数据。
$emit的第一个参数为父组件劫难数据的自定义事件，第二个为事件监听到的数据，这里用val来代表。